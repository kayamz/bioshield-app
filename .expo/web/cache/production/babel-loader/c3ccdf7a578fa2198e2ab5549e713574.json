{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{UnavailabilityError}from'expo-modules-core';import Sharing from\"./ExpoSharing\";export function isAvailableAsync(){return _regeneratorRuntime.async(function isAvailableAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!Sharing){_context.next=6;break;}if(!Sharing.isAvailableAsync){_context.next=5;break;}_context.next=4;return _regeneratorRuntime.awrap(Sharing.isAvailableAsync());case 4:return _context.abrupt(\"return\",_context.sent);case 5:return _context.abrupt(\"return\",true);case 6:return _context.abrupt(\"return\",false);case 7:case\"end\":return _context.stop();}}},null,null,null,Promise);}export function shareAsync(url){var options,_args2=arguments;return _regeneratorRuntime.async(function shareAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:options=_args2.length>1&&_args2[1]!==undefined?_args2[1]:{};if(!(!Sharing||!Sharing.shareAsync)){_context2.next=3;break;}throw new UnavailabilityError('Sharing','shareAsync');case 3:_context2.next=5;return _regeneratorRuntime.awrap(Sharing.shareAsync(url,options));case 5:return _context2.abrupt(\"return\",_context2.sent);case 6:case\"end\":return _context2.stop();}}},null,null,null,Promise);}","map":{"version":3,"sources":["../src/Sharing.ts"],"names":[],"mappings":"4DAAA,OAAS,mBAAT,KAAoC,mBAApC,CAEA,MAAO,CAAA,OAAP,qBAwBA,MAAO,SAAe,CAAA,gBAAf,iIACD,OADC,6BAEC,OAAO,CAAC,gBAFT,0EAGY,OAAO,CAAC,gBAAR,EAHZ,+FAKI,IALJ,yCAQE,KARF,uEAiBP,MAAO,SAAe,CAAA,UAAf,CAA0B,GAA1B,sJAAuC,OAAvC,kDAAiE,EAAjE,MACD,CAAC,OAAD,EAAY,CAAC,OAAO,CAAC,UADpB,gCAEG,IAAI,CAAA,mBAAJ,CAAwB,SAAxB,CAAmC,YAAnC,CAFH,0DAIQ,OAAO,CAAC,UAAR,CAAmB,GAAnB,CAAwB,OAAxB,CAJR","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport Sharing from './ExpoSharing';\n\n// @needsAudit\nexport type SharingOptions = {\n  /**\n   * Sets `mimeType` for `Intent` *(Android only)*\n   */\n  mimeType?: string;\n  /**\n   * ([Uniform Type Identifier](https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html))\n   * the type of the target file *(iOS only)*\n   */\n  UTI?: string;\n  /**\n   * Sets share dialog title *(Android and Web only)*\n   */\n  dialogTitle?: string;\n};\n\n// @needsAudit\n/**\n * Determine if the sharing API can be used in this app.\n * @return A promise that fulfills with `true` if the sharing API can be used, and `false` otherwise.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  if (Sharing) {\n    if (Sharing.isAvailableAsync) {\n      return await Sharing.isAvailableAsync();\n    }\n    return true;\n  }\n\n  return false;\n}\n\n// @needsAudit\n/**\n * Opens action sheet to share file to different applications which can handle this type of file.\n * @param url Local file URL to share.\n * @param options A map of share options.\n */\nexport async function shareAsync(url: string, options: SharingOptions = {}): Promise<object> {\n  if (!Sharing || !Sharing.shareAsync) {\n    throw new UnavailabilityError('Sharing', 'shareAsync');\n  }\n  return await Sharing.shareAsync(url, options);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}